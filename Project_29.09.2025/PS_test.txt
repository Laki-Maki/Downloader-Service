$body = '{ "urls": ["https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"] }'
Invoke-RestMethod -Uri http://localhost:8080/tasks -Method POST -Body $body -ContentType "application/json"


id         : 1815fca05d4228c1eba80540fcd87c52
urls       : {https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf}
status     : in_progress
created_at : 2025-09-29T13:00:04.6373056+03:00
updated_at : 2025-09-29T13:00:04.6373056+03:00



$taskId = "3886e055ef64eeaccbcc5cabe173587b"
Invoke-RestMethod -Uri "http://localhost:8080/task?id=$taskId" -Method GET


# -----------------------------
# Сценарий тестирования Go сервера
# -----------------------------


# 1) Список файлов для скачивания
$files = @(
    "https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-zip-file.zip",
    "https://epoch.okis.ru/files/4/6/1/4611/studentam/MS%20Word.pdf",
    "https://docs.google.com/document/d/1LnnOcff7kDVvJ1-ioyT-jBVQQfeX4xlf1pDTq8xtCr4/edit?tab=t.0"

)

# 2) Создание JSON тела запроса
$body = @{ urls = $files } | ConvertTo-Json

# 3) POST /tasks — создаём задачу
$response = Invoke-RestMethod -Uri http://localhost:8080/tasks -Method POST -Body $body -ContentType "application/json"

$taskId = $response.id
Write-Host "Создана задача с ID:" $taskId


# 4) Проверяем статус задачи каждые 2 секунды
do {
    Start-Sleep -Seconds 2
    $statusResponse = Invoke-RestMethod -Uri "http://localhost:8080/task?id=$taskId" -Method GET
    Write-Host ("Текущий статус: " + $statusResponse.status)
} while ($statusResponse.status -ne "done" -and $statusResponse.status -ne "failed")

# 5) Финальный вывод
if ($statusResponse.status -eq "done") {
    Write-Host " Задача завершена, файлы скачаны в папку downloads/"
} else {
    Write-Host " Задача завершилась с ошибкой:" $statusResponse.error
}
